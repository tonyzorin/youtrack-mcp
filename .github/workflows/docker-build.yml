# Docker Build and Push Workflow
# Updated with comprehensive diagnostics and secret validation
# Fixed Docker Hub authentication token format
name: Docker Build and Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOCKER_REPOSITORY: tonyzorin/youtrack-mcp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      env:
        YOUTRACK_URL: https://test.youtrack.cloud
        YOUTRACK_API_TOKEN: test-token
      run: |
        python -m pytest --tb=short
        
    - name: Verify version file
      run: |
        python -c "exec(open('youtrack_mcp/version.py').read()); print('Version:', __version__)"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Skip build for PRs, only test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version
      id: get_version
      run: |
        VERSION=$(python3 -c "exec(open('youtrack_mcp/version.py').read()); print(__version__)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Generate Docker tags and metadata
      id: meta
      run: |
        BASE_TAG="${{ env.DOCKER_REPOSITORY }}"
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        COMMIT_SHA=${GITHUB_SHA::8}
        
        # Generate tags based on trigger
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch push: WIP build
          TAGS="$BASE_TAG:${VERSION}_wip,$BASE_TAG:$COMMIT_SHA"
          echo "BUILD_TYPE=wip" >> $GITHUB_OUTPUT
          echo "üî® Building WIP version: ${VERSION}_wip"
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          # Release: production build
          TAGS="$BASE_TAG:$VERSION,$BASE_TAG:latest,$BASE_TAG:$COMMIT_SHA"
          echo "BUILD_TYPE=release" >> $GITHUB_OUTPUT
          echo "üöÄ Building release version: $VERSION"
        else
          # Fallback
          TAGS="$BASE_TAG:dev-$COMMIT_SHA"
          echo "BUILD_TYPE=dev" >> $GITHUB_OUTPUT
        fi
        
        echo "TAGS=$TAGS" >> $GITHUB_OUTPUT
        echo "Generated tags: $TAGS"

    - name: Docker build diagnostics
      run: |
        echo "üîç Docker Build Diagnostics"
        echo "Docker version: $(docker --version)"
        echo "Buildx version: $(docker buildx version)"
        echo "Available builders:"
        docker buildx ls
        echo ""
        echo "Repository: ${{ env.DOCKER_REPOSITORY }}"
        echo "Tags to build: ${{ steps.meta.outputs.TAGS }}"
        echo "Build type: ${{ steps.meta.outputs.BUILD_TYPE }}"
        echo "Version: ${{ steps.get_version.outputs.VERSION }}"

    - name: Verify Docker Hub secrets
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "‚ùå DOCKER_USERNAME secret is not set"
          echo "Please add DOCKER_USERNAME secret in repository settings"
          exit 1
        else
          echo "‚úÖ DOCKER_USERNAME secret is configured"
        fi
        
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "‚ùå DOCKER_PASSWORD secret is not set"
          echo "Please add DOCKER_PASSWORD secret in repository settings"
          exit 1
        else
          echo "‚úÖ DOCKER_PASSWORD secret is configured"
        fi

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Test Docker Hub connectivity
      run: |
        echo "Testing Docker Hub connectivity..."
        # Test with a simple docker pull to verify connectivity
        docker pull hello-world:latest
        echo "‚úÖ Docker Hub connectivity verified"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64  # Multi-platform support for both Intel and ARM
        push: true
        tags: ${{ steps.meta.outputs.TAGS }}
        labels: |
          org.opencontainers.image.title=YouTrack MCP
          org.opencontainers.image.description=YouTrack Model Context Protocol Server
          org.opencontainers.image.version=${{ steps.get_version.outputs.VERSION }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Verify pushed images
      run: |
        echo "üîç Verifying pushed images..."
        # Parse tags and verify each one
        IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.TAGS }}"
        for tag in "${TAG_ARRAY[@]}"; do
          echo "Checking: $tag"
          # Note: This might fail if the image was just pushed due to registry sync delays
          docker pull "$tag" || echo "Warning: Could not immediately pull $tag (registry sync delay)"
        done

    - name: Docker build summary
      run: |
        echo "‚úÖ Docker build completed successfully"
        echo "üì¶ Repository: ${{ env.DOCKER_REPOSITORY }}"
        echo "üè∑Ô∏è Tags: ${{ steps.meta.outputs.TAGS }}"
        echo "üî® Build type: ${{ steps.meta.outputs.BUILD_TYPE }}"
        echo "üìù Version: ${{ steps.get_version.outputs.VERSION }}"
        echo ""
        echo "üê≥ Available images:"
        IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.TAGS }}"
        for tag in "${TAG_ARRAY[@]}"; do
          echo "  - $tag"
        done

  pr-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: PR Build Info
      run: |
        echo "‚úÖ Tests passed for PR #${{ github.event.pull_request.number }}"
        echo "üìù PR builds are disabled - only testing"
        echo "üî® To get Docker images, merge to main for WIP build or create release for production" 